import { mkdirSync, writeFileSync } from 'fs';
import { dirname, join } from 'path';
import { URL } from 'url';
import { asyncProcess } from '../../utils/scriptUtils.js';
import { processParams } from './processParameters.js';
const __dirname = decodeURI(dirname(new URL(import.meta.url).pathname));
const defaultBuildCfg = {
    domain: 'changeMe',
    domainExt: 'com',
    subDomain: 'www',
    securePort: '8080',
    insecurePort: '8081',
    devPort: '5050',
    backendProtocol: 'https',
};
const { domain, subDomain, domainExt, insecurePort, devPort, securePort, backendProtocol, } = processParams(process.argv, defaultBuildCfg);
let envFileContent = '';
const addEnvContent = (newContent) => void (envFileContent += newContent + '\n');
addEnvContent('NODE_ENV=development');
addEnvContent(`SERVER_DIR=${join(__dirname, '..')}`);
addEnvContent(`DOMAIN="${domain}"`);
addEnvContent(`SUBDOMAIN="${subDomain}"`);
addEnvContent(`DOMAINEXTENSION="${domainExt}"`);
addEnvContent(`SECURE_PORT="${securePort}"`);
addEnvContent(`DEV_PORT="${devPort}"`);
addEnvContent(`INSECURE_PORT="${insecurePort}"`);
addEnvContent(`BACKEND_PROTOCOL="${backendProtocol}"`);
mkdirSync(join(__dirname, '../public/uploads'), { recursive: true });
mkdirSync(join(__dirname, '../dist/public/uploads'), { recursive: true });
writeFileSync(join(__dirname, '../.env'), envFileContent);
(async () => {
    console.log('Compiling the server ...');
    await asyncProcess('tsc', { shell: true, cwd: join(__dirname, '..') })[0];
    console.log('Server has been compiled.');
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJidWlsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxNQUFNLElBQUksQ0FBQztBQUM5QyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQzFCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdkQsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFFeEUsTUFBTSxlQUFlLEdBQUc7SUFDdkIsTUFBTSxFQUFFLFVBQVU7SUFDbEIsU0FBUyxFQUFFLEtBQUs7SUFDaEIsU0FBUyxFQUFFLEtBQUs7SUFDaEIsVUFBVSxFQUFFLE1BQU07SUFDbEIsWUFBWSxFQUFFLE1BQU07SUFDcEIsT0FBTyxFQUFFLE1BQU07SUFDZixlQUFlLEVBQUUsT0FBTztDQUN4QixDQUFDO0FBRUYsTUFBTSxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNULFlBQVksRUFDWixPQUFPLEVBQ1AsVUFBVSxFQUNWLGVBQWUsR0FDZixHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBRWpELElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUN4QixNQUFNLGFBQWEsR0FBRyxDQUFDLFVBQWtCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBR3pGLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3RDLGFBQWEsQ0FBQyxjQUFjLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBR3JELGFBQWEsQ0FBQyxXQUFXLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDcEMsYUFBYSxDQUFDLGNBQWMsU0FBUyxHQUFHLENBQUMsQ0FBQztBQUMxQyxhQUFhLENBQUMsb0JBQW9CLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFHaEQsYUFBYSxDQUFDLGdCQUFnQixVQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQzdDLGFBQWEsQ0FBQyxhQUFhLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDdkMsYUFBYSxDQUFDLGtCQUFrQixZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBSWpELGFBQWEsQ0FBQyxxQkFBcUIsZUFBZSxHQUFHLENBQUMsQ0FBQztBQUd2RCxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDckUsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsd0JBQXdCLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRzFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBRTFELENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDeEMsTUFBTSxZQUFZLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUUsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzFDLENBQUMsQ0FBQyxFQUFFLENBQUMifQ==